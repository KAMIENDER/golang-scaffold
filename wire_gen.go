// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/KAMIENDER/golang-scaffold/infra/auth"
	"github.com/KAMIENDER/golang-scaffold/infra/config"
	"github.com/KAMIENDER/golang-scaffold/infra/database/mysql"
	"github.com/KAMIENDER/golang-scaffold/infra/database/nosql"
	"github.com/KAMIENDER/golang-scaffold/server"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func NewHandler() (*server.Handler, error) {
	engine := gin.New()
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	redis := nosql.NewRedis(configConfig)
	db, err := mysql.NewDatabase(configConfig)
	if err != nil {
		return nil, err
	}
	authManager, err := auth.NewAuthManager(configConfig, db, redis)
	if err != nil {
		return nil, err
	}
	handler := &server.Handler{
		Router:      engine,
		NoSQLClient: redis,
		DB:          db,
		AuthManager: authManager,
	}
	return handler, nil
}

// wire.go:

var BardSet = wire.NewSet(config.NewConfig, nosql.NewRedis, mysql.NewDatabase, gin.New, wire.Struct(new(server.Handler), "*"), auth.NewAuthManager, wire.Bind(new(nosql.NoSQLDB), new(*nosql.Redis)))
